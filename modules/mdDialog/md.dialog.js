// Generated by CoffeeScript 1.7.1
(function() {
  define(["jquery", "../draggable/md.draggable.js"], function(require, exports, module) {
    var Drag, MDDialog, jquery;
    jquery = require("jquery");
    Drag = require('../draggable/md.draggable.js');
    return MDDialog = (function() {
      function MDDialog(element, opts) {
        this.element = element;
        this.opts = opts;
        this.$el = $(this.element);
        this.options = $.extend({}, MDDialog.DEFAULTS, this.opts);
        this.inti();
      }

      MDDialog.DEFAULTS = {
        onConfirm: null,
        onShow: null,
        onHide: null,
        title: '',
        content: null,
        width: 400,
        $dialog: null,
        draggable: true,
        footer: null,
        height: "auto"
      };

      MDDialog.STATICS = {
        template: '<div class="md-dialog overlay"><div class="dialog"><div class="dialog-header"><span class="btn-link btn-close" type="button">×</span></div><div class="dialog-body"></div><div class="dialog-footer"><button class="btn btn-cancel">取消</button><button class="btn btn-primary btn-ok">确定</button></div></div></div>'
      };

      MDDialog.prototype.inti = function() {
        this.dialog().show().remove();
        this.$header = this.$dialog.find(".dialog-header");
        this.$body = this.$dialog.find(".dialog-body");
        this.$footer = this.$dialog.find(".dialog-footer");
        if (this.options.title !== null) {
          this.$header.append(this.options.title);
        }
        if (this.options.content !== null) {
          this.$body.empty().append(this.options.content);
        }
        if (this.options.footer !== null) {
          this.$footer.append(this.options.footer);
        }
        return this.$el.on("click", $.proxy(this.show, this));
      };

      MDDialog.prototype.setPosition = function() {
        var left, top;
        left = ($(window).innerWidth() - this.$dialog.find(".dialog").innerWidth()) / 2;
        top = ($(window).innerHeight() - this.$dialog.find(".dialog").innerHeight()) / 2;
        return this.$dialog.find(".dialog").css({
          left: left,
          top: top
        });
      };

      MDDialog.prototype.dialog = function() {
        return this.$dialog = this.$dialog || this.options.$dialog || $(MDDialog.STATICS.template);
      };

      MDDialog.prototype.show = function(opts) {
        var options;
        options = $.extend({}, MDDialog.DEFAULTS, this.options, opts);
        if (typeof this.options.onShow === 'function') {
          options.onShow();
        }
        this.dialog().show().appendTo("body");
        this.$dialog.on("click", ".btn-cancel,.btn-close", $.proxy(this.hide, this));
        this.$dialog.on("click", ".btn-ok", $.proxy(this.ok, this));
        if (this.options.draggable) {
          this.dialog().addClass('draggable');
          this.$header.draggable(this.$dialog.find(".dialog")[0]);
        }
        return this.setPosition();
      };

      MDDialog.prototype.hide = function() {
        if (typeof this.options.onHide === 'function') {
          this.options.onHide();
        }
        return this.$dialog.remove();
      };

      MDDialog.prototype.ok = function() {
        if (typeof this.options.onConfirm === 'function') {
          return this.options.onConfirm();
        }
      };

      $.fn.mdDialog = function(options) {
        return this.each(function() {
          return new MDDialog(this, options);
        });
      };

      $.fn.mdDialog.Constructor = MDDialog;

      return MDDialog;

    })();
  });

}).call(this);

//# sourceMappingURL=md.dialog.map
